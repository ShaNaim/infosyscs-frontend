import Head from "next/head";
import Image from "next/image";
import React from "react";
import CssBaseline from "@mui/material/CssBaseline";
import Box from "@mui/material/Box";
import Container from "@mui/material/Container";
import FileUpload from "@/components/FileUploader/inedx";
import { getCookie, getCookies, hasCookie, deleteCookie } from "cookies-next";
import { handleGetUserData } from "@/api/auth";
import { checkCookie } from "@/api/upload";
import { selectAuthState, setAuthState } from "@/store/authSlice";
import { wrapper } from "@/store/store";
import { useDispatch, useSelector } from "react-redux";
export default function Home({ accessToken }) {
	const authState = useSelector(selectAuthState);
	return (
		<>
			<CssBaseline />
			<Head>
				<title>InfoSysCs | Home</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
			</Head>
			<React.Fragment>
				<Container maxWidth="lg">
					<Box sx={{ bgcolor: "#faf9f9" }}>
						<FileUpload />
					</Box>
				</Container>
			</React.Fragment>
		</>
	);
}

// export const getServerSideProps = async ({ req, res }) => {
// 	try {
// 		const cookies = getCookies({ req, res });
// 		if (!cookies.accessToken) {
// 			return { props: { accessToken: false } };
// 		}
// 		return { props: { accessToken: cookies.accessToken, user: user.data } };
// 	} catch (error) {
// 		return { props: { accessToken: false } };
// 	}
// };
export const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, res }) => {
	try {
		let isAuth = "";
		const cookies = getCookies({ req, res });
		if (!cookies.accessToken) {
			return { props: { accessToken: false } };
		}
		isAuth = cookies.accessToken;
		const user = await handleGetUserData(isAuth);
		if (!user) return { props: { accessToken: false } };
		await store.dispatch(
			setAuthState({
				isLogedUser: true,
				accessToken: cookies.accessToken,
				user: user.data,
			})
		);
		if (cookies.report_auth_token) {
			const foundAndConnected = await connectToReport(isAuth, cookies.report_auth_token);
			if (!foundAndConnected) return { props: { accessToken: isAuth, user: user.data } };
			return {
				props: { accessToken: isAuth, user: user.data, report: foundAndConnected },
			};
		}
		return { props: { accessToken: isAuth, user: user.data } };
	} catch (error) {
		return { props: { accessToken: false } };
	}
});
